package metrics

import (
	"github.com/prometheus/client_golang/prometheus"
)

// ParkMetrics contains all metrics specific to the main kubepark simulator
var (
	Cash = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "cash",
		Help: "Current amount of money available",
	})

	Time = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "time",
		Help: "Current time in the park (unix timestamp)",
	})

	EntranceFee = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "entrance_fee",
		Help: "Current entrance fee for the park",
	})

	OpensAt = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "opens_at",
		Help: "Hour at which the park opens",
	})

	ClosesAt = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "closes_at",
		Help: "Hour at which the park closes",
	})

	IsParkClosed = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "is_closed",
		Help: "Whether the park is closed (1) or open (0)",
	})

	ParkAttempts = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "attempts",
			Help: "Number of attempts to enter the park",
		},
		[]string{"success", "reason"},
	)
)

// AttractionMetrics contains all metrics common to attractions
var (
	Revenue = prometheus.NewCounter(prometheus.CounterOpts{
		Name: "revenue",
		Help: "Total revenue generated by the attraction",
	})

	Fee = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "fee",
		Help: "Current fee for using the attraction",
	})

	IsAttractionClosed = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "is_closed",
		Help: "Whether the attraction is closed (1) or open (0)",
	})

	AttractionAttempts = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "attempts",
			Help: "Number of attempts to use the attraction",
		},
		[]string{"success", "reason"},
	)
)

// RegisterParkMetrics registers all park-specific metrics
func RegisterParkMetrics() {
	prometheus.MustRegister(Cash)
	prometheus.MustRegister(Time)
	prometheus.MustRegister(EntranceFee)
	prometheus.MustRegister(OpensAt)
	prometheus.MustRegister(ClosesAt)
	prometheus.MustRegister(IsParkClosed)
	prometheus.MustRegister(ParkAttempts)
}

// RegisterAttractionMetrics registers all attraction-specific metrics
func RegisterAttractionMetrics() {
	prometheus.MustRegister(Revenue)
	prometheus.MustRegister(Fee)
	prometheus.MustRegister(IsAttractionClosed)
	prometheus.MustRegister(AttractionAttempts)
}
