# PersistentVolume for Restroom
apiVersion: v1
kind: PersistentVolume
metadata:
  name: restroom-pv
  labels:
    app.kubernetes.io/name: kubepark
    app.kubernetes.io/component: attraction
    app.kubernetes.io/instance: restroom
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  hostPath:
    path: /tmp/kubepark/attractions/restroom
    type: DirectoryOrCreate

---
# PersistentVolumeClaim for Restroom
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: restroom-pvc
  namespace: attractions
  labels:
    app.kubernetes.io/name: kubepark
    app.kubernetes.io/component: attraction
    app.kubernetes.io/instance: restroom
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-storage

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: restroom
  namespace: attractions
  labels:
    app.kubernetes.io/name: kubepark
    app.kubernetes.io/component: attraction
    app.kubernetes.io/instance: restroom
    app: restroom
    attraction: restroom
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: restroom
  template:
    metadata:
      labels:
        app: restroom
        app.kubernetes.io/name: kubepark
        app.kubernetes.io/component: attraction
        app.kubernetes.io/instance: restroom
        attraction: restroom
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: volume-permissions
          image: busybox:1.35
          command:
            ["sh", "-c", "chown -R 1000:1000 /data && chmod -R 755 /data"]
          volumeMounts:
            - name: restroom-storage
              mountPath: /data
          securityContext:
            runAsUser: 0
      containers:
        - name: restroom
          image: localhost:5001/kubepark:latest
          ports:
            - containerPort: 80
              name: http
            - containerPort: 9000
              name: metrics
          command: ["restroom"]
          args:
            - "--park-url"
            - "http://park.park.svc.cluster.local."
            - "--volume"
            - "/data"
          volumeMounts:
            - name: restroom-storage
              mountPath: /data
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          livenessProbe:
            httpGet:
              path: /attraction-status
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /attraction-status
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: restroom-storage
          persistentVolumeClaim:
            claimName: restroom-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: restroom
  namespace: attractions
  labels:
    app.kubernetes.io/name: kubepark
    app.kubernetes.io/component: attraction
    app.kubernetes.io/instance: restroom
    app: restroom
    attraction: restroom
spec:
  selector:
    app: restroom
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30082
    - name: metrics
      protocol: TCP
      port: 9000
      targetPort: 9000
      nodePort: 30092
  type: NodePort
