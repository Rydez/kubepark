version: "3"

vars:
  REGISTRY: localhost:5001
  IMAGE_NAME: kubepark
  IMAGE_TAG: latest

tasks:
  default:
    desc: "üé¢ Show KubePark Game Commands"
    silent: true
    cmds:
      - echo "üé¢ KubePark Game Commands"
      - echo ""
      - echo "Setup & Build:"
      - echo "  setup           Create Kind cluster and start monitoring stack"
      - echo "  build           Build and push the game image"
      - echo ""
      - echo "Game Commands:"
      - echo "  deploy park     Start the park (begins the game!)"
      - echo "  deploy carousel Deploy carousel attraction"
      - echo "  deploy restroom Deploy restroom attraction (creates new instance each time)"
      - echo "  list-restrooms  Show all deployed restroom instances"
      - echo "  list-carousels  Show all deployed carousel instances"
      - echo "  remove-restrooms Remove all restroom instances"
      - echo ""
      - echo "Monitoring:"
      - echo "  status          Show current park status"
      - echo "  logs            View park logs"
      - echo "  open-grafana    Open Grafana dashboard"
      - echo "  restart-monitoring Restart monitoring stack"
      - echo "  restart-alloy   Restart Alloy log collection"
      - echo "  upgrade-alloy   Upgrade Alloy with latest configuration"
      - echo "  reload-dashboards Reload Grafana dashboards"
      - echo "  reset-dashboards Complete dashboard reset (clears cache)"
      - echo ""
      - echo "Cleanup:"
      - echo "  clean           Clean up everything"

  setup:
    desc: "üèóÔ∏è Setting up KubePark infrastructure..."
    cmds:
      - echo "üèóÔ∏è  Setting up KubePark infrastructure..."
      - echo "Creating Kind cluster with local registry..."
      - cd cluster && ./kind-with-registry.sh
      - echo "Starting monitoring stack..."
      - docker-compose up -d
      - echo "Waiting for monitoring stack to be ready..."
      - sleep 10
      - echo "Setting up Kubernetes resources..."
      - kubectl apply -f k8s/base/
      - echo "Adding Grafana Helm repository..."
      - helm repo add grafana https://grafana.github.io/helm-charts
      - helm repo update
      - echo "Deploying log collection (Alloy) using Helm..."
      - helm upgrade --install alloy grafana/alloy --namespace alloy --values k8s/alloy-values.yaml --wait
      - echo "‚úÖ Setup complete! Run 'task build' next."

  build:
    desc: "üî® Building KubePark image..."
    dir: ..
    cmds:
      - echo "üî® Building KubePark image..."
      - docker build -t {{.REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} .
      - echo "üì§ Pushing image to local registry..."
      - docker push {{.REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}
      - echo "‚úÖ Build complete! Run 'task deploy park' to start the game."

  deploy:
    desc: "üé¢ Deploy park components (usage: task deploy <type>)"
    vars:
      TYPE: "{{.CLI_ARGS | first}}"
      INSTANCE_ID:
        sh: echo "$(date +%s)-$(shuf -i 1000-9999 -n 1)"
    env:
      INSTANCE_ID: "{{.INSTANCE_ID}}"
      ATTRACTION_TYPE: "{{.TYPE}}"
    cmds:
      - |
        deploy_attraction() {
          local emoji=$1
          local name=$2
          
          echo "$emoji Deploying $name attraction..."
          envsubst < k8s/attraction.yaml | kubectl apply -f -
          echo "‚è≥ Waiting for $name to be ready..."
          INSTANCE_NAME=$(kubectl get deployments -n attractions -l attraction=$name --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}')
          kubectl wait --for=condition=available --timeout=60s deployment/$INSTANCE_NAME -n attractions
          echo "‚úÖ $name is operational!"
        }

        case "{{.TYPE}}" in
          park)
            echo "üé™ Starting the park..."
            kubectl apply -f k8s/park.yaml
            echo "‚è≥ Waiting for park to be ready..."
            kubectl wait --for=condition=available --timeout=60s deployment/park -n park
            echo "‚úÖ Park is open! Check status with 'task status'"
            ;;
          carousel)
            deploy_attraction "üé†" "carousel"
            ;;
          restroom)
            deploy_attraction "üöª" "restroom"
            ;;
          *)
            echo "‚ùå Invalid deployment type: {{.TYPE}}"
            echo "Valid types: park, carousel, restroom"
            echo "Usage: task deploy <type>"
            exit 1
            ;;
        esac

  remove-restrooms:
    desc: "üóëÔ∏è Remove all restroom instances"
    cmds:
      - echo "üóëÔ∏è Removing all restroom instances..."
      - kubectl delete deployments,services -n attractions -l attraction=restroom
      - echo "‚úÖ All restrooms removed!"

  status:
    desc: "üé¢ Show current park status"
    cmds:
      - echo "üé¢ KubePark Status"
      - echo "=================="
      - echo ""
      - echo "üìä Cluster Status:"
      - kubectl get nodes
      - echo ""
      - echo "üé™ Park Services:"
      - kubectl get pods,svc -n park
      - echo ""
      - echo "üé† Attractions:"
      - kubectl get pods,svc -n attractions
      - echo ""
      - echo "üë• Guests:"
      - kubectl get jobs,pods -n guests 2>/dev/null || echo "No guest jobs currently running (managed by park service)"
      - echo ""
      - echo "üìà Monitoring:"
      - docker-compose ps
      - echo ""
      - echo "üìã Data Collection:"
      - kubectl get pods -n alloy -l app.kubernetes.io/name=alloy

  logs:
    desc: "üìã View recent park logs"
    cmds:
      - echo "üìã Recent park logs:"
      - kubectl logs -n park deployment/park --tail=20 || echo "Park not deployed yet"

  open-grafana:
    desc: "üìä Open Grafana dashboard"
    cmds:
      - echo "üìä Opening Grafana dashboard..."
      - 'echo "URL: http://localhost:3000"'
      - 'echo "Username: admin"'
      - 'echo "Password: admin"'
      - open http://localhost:3000 2>/dev/null || echo "Please open http://localhost:3000 manually"

  restart-monitoring:
    desc: "üîÑ Restart monitoring stack"
    cmds:
      - echo "üîÑ Restarting monitoring stack..."
      - echo "Stopping monitoring services..."
      - docker-compose down
      - echo "Starting monitoring services..."
      - docker-compose up -d
      - echo "‚è≥ Waiting for services to be ready..."
      - sleep 15
      - echo "‚úÖ Monitoring stack restarted!"
      - 'echo "Grafana: http://localhost:3000 (admin/admin)"'
      - 'echo "Prometheus: http://localhost:9090"'
      - 'echo "Loki: http://localhost:3100"'

  restart-alloy:
    desc: "üîÑ Restart Alloy log collection"
    cmds:
      - echo "üîÑ Restarting Alloy log collection..."
      - kubectl rollout restart daemonset/alloy -n alloy
      - echo "‚úÖ Alloy restarted!"

  upgrade-alloy:
    desc: "‚¨ÜÔ∏è Upgrade Alloy with latest configuration"
    cmds:
      - echo "‚¨ÜÔ∏è  Upgrading Alloy configuration..."
      - helm upgrade alloy grafana/alloy --namespace alloy --values k8s/alloy-values.yaml --wait
      - echo "‚úÖ Alloy upgraded!"

  reload-dashboards:
    desc: "üîÑ Reload Grafana dashboards"
    cmds:
      - echo "üîÑ Reloading Grafana dashboards..."
      - docker-compose restart grafana
      - echo "‚è≥ Waiting for Grafana to restart..."
      - sleep 10
      - echo "‚úÖ Dashboards reloaded!"

  reset-dashboards:
    desc: "üîÑ Complete dashboard reset (nuclear option)"
    cmds:
      - echo "üîÑ Completely resetting Grafana dashboards..."
      - echo "Stopping Grafana..."
      - docker-compose stop grafana
      - echo "Removing Grafana container to clear cache..."
      - docker-compose rm -f grafana
      - echo "Removing Grafana data volume to clear all cached dashboards..."
      - docker volume rm walkthrough_grafana_data
      - echo "Starting fresh Grafana with clean state..."
      - docker-compose up -d grafana
      - echo "‚è≥ Waiting for Grafana to initialize completely..."
      - sleep 25
      - echo "‚úÖ Grafana reset complete! All dashboards will be freshly loaded."
      - 'echo "Login at http://localhost:3000 with admin/admin"'

  restart-park:
    desc: "üîÑ Restart park service"
    cmds:
      - kubectl rollout restart deployment/park -n park

  restart-attractions:
    desc: "üîÑ Restart all attractions"
    cmds:
      - kubectl rollout restart deployment/carousel -n attractions || true
      - kubectl rollout restart deployment/restroom -n attractions || true

  clean:
    desc: "üßπ Clean up everything"
    cmds:
      - echo "üßπ Cleaning up KubePark..."
      - docker-compose down -v
      - kind delete cluster --name kubepark-cluster
      - docker rm -f kind-registry 2>/dev/null || true
      - echo "‚úÖ Cleanup complete!"

  # Convenience aliases
  help:
    desc: "Show help (alias for default)"
    cmds:
      - task: default
